#!/usr/bin/perl
# ============================================================================
#             Copyright (c) 2014 Kevin L. Esteb All Rights Reserved
#
#
# TITLE:       xas-collector
#
# FACILITY:    XAS 
#
# ABSTRACT:    This procdure will collect alert data from the message queue
#              and store it into a database.
#
# ENVIRONMENT: XAS Environment
#
# PARAMETERS:  
#              --logfile      the log file to use
#              --log-type     the type of log file
#              --log-facility the facility class of the log
#              --pidfile      the pid file to use
#              --cfgfile      the configuration file to use
#              --install      install as a service on Windows
#              --deinstall    deinstall as a service on Windows
#              --help         prints out a helpful help message
#              --manual       prints out the procedures manual
#              --version      prints out the procedures version
#              --debug        toggles debug output
#              --daemon       wither to become a daemon
#              --alerts       toggles alert notification
#
# RETURNS:     0 - success
#              1 - failure
#              2 - already running
#
# Version      Author                                              Date
# -------      ----------------------------------------------      -----------
# 0.01         Kevin Esteb                                         25-Nov-2014
#
# ============================================================================
#

use lib "../lib";
use XAS::Apps::Collector::Process;

main: {

    my $app = XAS::Apps::Collector::Process->new(
        -throws  => 'xas-collector',
    );

    exit $app->run();

}

__END__

=head1 NAME

xas-collector - Collects events for the XAS environment

=head1 SYNOPSIS

xas-collector [--help] [--debug] [--manual] [--version]

 options:

    --logfile      the log file to use
    --log-type     the type of log file
    --log-facility the facility class of the log
    --pidfile      the pid file to use
    --cfgfile      the configuration file to use
    --install      install as a service on Windows
    --deinstall    deinstall as a service on Windows
    --help         prints out a helpful help message
    --manual       prints out the procedures manual
    --version      prints out the procedures version
    --debug        toggles debug output
    --daemon       wither to become a daemon
    --alerts       toggles alert notification

=head1 DESCRIPTION

This procedure monitors queues on the the message queue server and process
any entries on those queues. This uses a configuration file to load the
specific modules needed to do this task.

=head1 CONFIGURATION

The configuration file is the familiar Windows .ini format. It has the 
following stanzas.

 [collector: input]
 module = XAS::Collector::Input::Stomp
 port = 61613
 host = localhost
 alias = input-stomp

This stanza defines an input for the collector. There can be multiple. The
"input" in thae stanzas name must be unique. The "module" is what to load and
subsequent parameters are used by that module for initialization. They don't
need a preceeding "-".

 [collector: output]
 module = XAS::Collector::Output::Socket::Logstash
 port = 9500
 host = localhost
 alias = output-logstash

This stanza defines an output for the collector. There can be multiple. The
"output" in the stanzas name must be unique. The "module" is what to load and
subsequent parameters are used by that module for initialization. They don't
need a preceeding "-".

 [collector: xas-alerts]
 module = XAS::Collector::Formatter::Alerts
 alias = format-alerts
 queue = /queue/alerts
 output = output-logstash

This stanza defines a formatter for the collector. There can be multiple. The
'wise-notify' is a known message type. It is also used by inputs to forward
message types to the correct formatters. The "queue" is what queue the inputs
should monitor and "output" is the alias of the outputer to send the formatted
data too.

=head1 OPTIONS AND ARGUMENTS

=over 4

=item B<-cfgfile>

The configuration file to use.

=item B<--log-type>

Toggles the log type. Defaults to 'console'. Can be 'console', 'file', 
'json' or 'syslog'.

=item B<--log-facility>

Toggles the log facilty. Defaults to 'local6'. This follows syslog
convention.

=item B<--logfile>

The log file to use.

=item B<--pidfile>

the pid file to use.

=item B<--daemon>

Run as a daemon.

=item B<--debug>

Turns on debbuging.

=item B<--help>

Displays a simple help message.

=item B<--manual>

The complete documentation.
  
=item B<--version>

Prints out the apps version

=back

=head1 EXIT CODES

 0 - success
 1 - failure
 2 - already running

=head1 SEE ALSO

=over 4

=item L<XAS|XAS>

=item L<XAS::Collector|XAS::Collector>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kesteb@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2014 Kevin L. Esteb

This is free software; you can redistribute it and/or modify it under
the terms of the Artistic License 2.0. For details, see the full text
of the license at http://www.perlfoundation.org/artistic_license_2_0.

=cut
